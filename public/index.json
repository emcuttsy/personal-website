[{"categories":[],"content":"After finishing Duolingo German, I started making digital flashcards so that I’d have something to keep my iThumbs occupied through corona lockdown better than scrolling through the reams of international and domestic horrors served up by my newsfeed. I ended up spending months of experimenting with Anki and looking into popular German vocabulary sets online, and this 1000-word flashcard deck of core German vocabulary is the result. I put a lot of thought into my deck and drew a lot from my experience learning German to inform what words to include and how to build the cards. For instance, every word in my deck is taught along with its important grammatical properties such as gender and plural for nouns and conjugations for verbs. Noun articles are even automatically color-coded by gender using a bit of JavaScript and CSS. And the cards attempt to strike a nice balance between hitting critical basic vocabulary (der Mann, sprechen, blau, etc.) and not wasting time with words like articles and pronouns that are really best left to grammar lessons and immersion. Deck Features Thoughtful vocabulary choice Balance1 between nouns (499) and other parts of speech: 230 verbs, 212 adjectives and adverbs, 59 prepositions and conjunctions 100 most frequently used and dozens I encountered often as I learned to read German books and news Abstract nouns important for comprehension in addition to the usual concrete noun categories (animals, foods, jobs, etc.) Expands core noun, verb, and adjective vocabulary from the popular Fluent Forever 625 Base Vocabulary Word List Omits pronouns, articles, most numbers, and other words that you probably already know and which are anyways better learned by immersion or focused grammar study Example sentences pulled from real German sentences for every word Sources included Linguee, Reverso Context, and the Goethe Institut A1-B1 word list Base form of verbs and nouns (or identical form) consistently used to avoid ambuguity, especially if you use the examples to make your own close deletion cards Card types with consistent design for easy import of new cards. See this Google Drive sheet for an example of how you could format an excel spreadsheet for easy import. Cards teach important grammatical properties of words Noun articles highlighted in blue, pink, or gold according to gender using JavaScript and CSS that will work for cards you add yourself as well Distinct card types for nouns, verbs, prepositions, and other Special cards generated to teach noun plural and verb conjugation Nouns are important, but I tend to think that they overshadow other parts of speech (especially verbs) in vocabulary lists for learners in a way that hinders expression and fluency. The beginning of this blog post from The Language Gym sums up how I feel pretty well. ↩︎ ","date":"2020-10-11","objectID":"/2020-10-11-1000-word-german-flashcard-deck/:0:0","tags":[],"title":"1000-word German flashcard deck","uri":"/2020-10-11-1000-word-german-flashcard-deck/"},{"categories":[],"content":"My deck is available for anyone to use for free on Anki For those who don’t know, Anki is a free, open-source digital flashcard program mostly known for its use of the spaced repetition method. Spaced repetition has been shown to improve memory retention under some circumstances, and based on my experience digging around on Anki enthusiast forums and blogs, it seems that Anki’s core (or at least most vocal) demographic is a combination of med students and quiz bowl types, a crowd united in its need to absorb and retain heaps of minutea. Language learners also need to absorb and retain heaps of minutea, and there are plenty of spaced repetition softwares out there made specificaly with language learners in mind. The famous Pimsleur Language Programs are based on spaced repetition, as are Memrise, Quizlet, and Wanikan Anki isn’t specifically targeted at anyone, and comes with a lot of customizability and control that allow users to shape their own experiences and tailor the app to their own needs. It is also media-rich, allowing images, embedded audio, and even video and GIFs. If you know a bit of HTML, CSS, and/or JavaScript, you can take card customization pretty far and implement things like conditional formatting based on the content of your cards, which is something I’ll post about later. The main reason I like Anki is that it allows me to make my own cards and sync them across my devices for free—which is something anyone can enjoy even if you’re not interested in getting into the Anki-optimization weeds. ","date":"2020-10-11","objectID":"/2020-10-11-1000-word-german-flashcard-deck/:1:0","tags":[],"title":"1000-word German flashcard deck","uri":"/2020-10-11-1000-word-german-flashcard-deck/"},{"categories":[],"content":"Get the cards and vocabulary list Get the flashcard deck from AnkiWeb My deck is available for download from AnkiWeb. If you haven’t used Anki before, you’ll first need to make an AnkiWeb account and download Anki for your desktop or phone. Once you’re logged into AnkiWeb, you can simply click the “Download” button on my deck’s page to access it through Anki. You can then either use the flashcards in your browser through AnkiWeb or sync your phone/desktop app to your AnkiWeb account to use the cards wherever you go. I recommend using the phone app!Google Drive vocabulary list Get the vocabulary list from Google Drive If you’d rather not use Anki, my 1000-word vocabulary list is available as a spreadsheet on Google Drive along with all example sentences, conjugations, noun genders, plurals, etc. The sheet is organized so as to make it easy for importing into Anki or whatever flashcard program you might use. These cards are still a work in progress, and I’ll be updating the Google Drive spreadsheet and Anki deck as I make corrections and fix errors/bugs. I’m also working to neaten the HTML/CSS and JavaScript that controls conditional formatting on the noun cards and am looking into conditional formatting for irregular verbs as well. I’m currently also playing around with the idea of making “expansion packs” of vocabulary built around certain themes (food, high fantasy, politics, etc.) that work with my card formats. If that ends up happnening I will of course also make the Google Sheets available as well for anyone who prefers to make their own cards. Don’t hesitate to reach out if you notice an error in the cards or want to help with improving them. I hope they’re useful! ","date":"2020-10-11","objectID":"/2020-10-11-1000-word-german-flashcard-deck/:2:0","tags":[],"title":"1000-word German flashcard deck","uri":"/2020-10-11-1000-word-german-flashcard-deck/"},{"categories":["Geobiology","Fun Facts"],"content":"Something I’ve thoroughly enjoyed in the first few weeks of taking a phylogenomics course is getting to think about non-microbial life for a change. The class will reorient its focus in a microbial direction here in the upcoming weeks, but thinking about familiar groups of macroscopic organisms to start makes it a lot easier to get a grip on fundamental concepts in phylogenomics and evolution. Microbes are neat. But would anyone really argue that dinosaurs aren’t at least a bit neat-er? The course instructor, Prof. Fournier, tends to ask us a lot of questions encouraging us to come up with examples of certain evolutionary relationships (check out this list of phylogenetic terms if you’re interested). But some of his questions are just about sharing fun facts. I love fun facts. Last lecture, as we were discussing differences between eukaryotic and microbial evolution, Prof. Fournier pointed out that, in general, microbes evolve by expanding their metabolic capabilities whereas complex multicellular life usually responds to selective pressure by evolving new structures—think hands for grasping, fins for swimming, etc. Microbes easily adapt their entire cellular toolboxes for survival under extreme conditions—acidity, lack of oxygen, high temperatures, etc. Complex life can’t do that so well, since it’s, well, complex. And complexity is great for things like evolving hands and discovering fire, but it can actually get in the way of survival under extreme conditions. There are just too many interdependent moving parts in a complex organism to allow for the kind of easy metabolic mix-and-match that microbes get away with. Evolving new body plans and parts will only get you so far if you need to start breathing iron or keep your DNA from unzipping at boiling temperatures. That’s why you’ll find bacteria happily munching away on toxic gas abd living in boiling hot springs and lakes full of arsenic while animals, plants, and (to a lesser degree) fungi tend to need to more clement habitats with plenty of oxygen and food to consume. But hold on, that’s not even the fun fact. I’m getting there. Microbes account for the vast majority of life’s metabolic diveristy. And spend enough time in geobiology courses and it’s pretty easy to begin to think that there’s no limit to what bacteria and archaea can overcome. Compared to “higher” lifeforms they can seem downright indestructable—at least on the level of populations. Sure, individual bugs might not survive in some inhospitable environment, but there’s almost always a weird relative or two a few branches over on the tree of life that finds that same boiling hot spring or melt-your-face-off acid pool downright cozy. So I was a bit puzzled at first when Prof. Fournier followed up his point about structural vs. metabolic evolution by asking “what is the one extreme environmental condition that complex life, especially vertebrates, has more successfully overcome than microbes?” A puzzle. It took the class a while to figure it out. But we did. It’s cold. A handful of mammals, birds, and fish have independently evolved ways to survive, maintain activity, and reproduce at sub-zero temperatures, but microbes haven’t. Prof. Founrier explained that even the most “cryophilic” microbes can’t maintain metabolic activity at just a few degrees below 0 C. In brine pockets with enough salinity to keep water liquid below freezing temperatures, microbes still don’t cope well if it gets too cold. Metabolic reactions required for maintaining cell integrity, growing and reproducing grind to a halt below freezing. Big lifeforms can generate enough heat to warm themselves, but microbes can’t. They’re just too small, their surface-area to voulme ratio just too enormous—that is, relative to their size, microbes have a lot less interior volume that could be used to run heat-producing reactions than external surface area through which any generated heat escapes. Of course, it’s not as though you won’t find any microbes","date":"2020-09-16","objectID":"/2020-09-16-i-extremophile/:0:0","tags":["microbiology","geobiology","grad school","fun facts"],"title":"I, extremophile","uri":"/2020-09-16-i-extremophile/"},{"categories":null,"content":"Coming to Boston was definitely easier than going to Denmark this summer—at least there wasn’t a risk of being turned away at the border—but it also wasn’t exactly easy. Cancelled flights, state travel rules, booked-up COVID-19 test centers, and layer upon layer of MIT pandemic policy made it all a bit more complicated than I anticipated. And on top of all that, my mattress won’t be here for another week! They said 3-5 days 14 days ago! Whining aside, after two wonderful months with Clemens in Denmark, I’ve arrived safe and sound in Boston (Somerville, really) to start my PhD. And unlesss I managed to get myself infected within the last 4 days, I’m virus-free. At least COVID-19-free. There are almost certainly some other, more low-key viruses just minding their own business in my nose wondering what drove me to stick a cotton swab up there. Anwyays, I know that I don’t have COVID-19 because I was tested the day after I arrived in Boston. Massachusetts has a pretty strict 14-day quarantine requirement for travellers from anywhere outside of New England and New York, but if you test negative you’re free to move around. It’s unclear if or how this will be enforced, but I wanted to play along and respect the health of my roommates by getting a test. The test was definitely more of a formality than anything else, though, since Denmark (among plenty of other countries) is actually doing a lot better COVID-wise than even success-story US states like MA. The quarantine requirement for all international travellers strikes me as more of a punishment than a justified pandemic control measure. Getting a test wasn’t as straightforward as I anticiapted—mostly because I didn’t anticipate. If you call a few weeks in advance, there are free testing centers that serve most neighborhoods in greater Boston. Even asymptomatic people can get tested for free there. But I didn’t think in advance. Ultimately, got a test by signing up for a primary care provider through MIT Medical. After doing that, I was able to get a test there, since that’s where I get my primary care (as of a the day I booked the test). I wanted a PCP, so bonus! Not-bonus: It turns out, MIT policy requires returning international travellers to quarantine for 7 days before testing them or allowing them on campus for any reason. The nurse who took my test was very nice about telling me this, but in the future I’ll need to plan ahead a bit better. That all taken care of, I can move on from travel and testing concerns. Now it’s time to focus on getting started here which, until my research poject gets going, will mean a lot of MIT onboarding and waiting around for Amazon deliveries. Anyways, not a particularly unique story from this time of non-complimentary and often overlapping institutional and governmental COVID-19 policies. The upshot is, I’m safe in Boston. I just hope I’ll soon be able to say the same for my mattress! ","date":"2020-09-01","objectID":"/2020-09-01-safe-and-sound-and-covid-19-negative/:0:0","tags":["covid-19","MIT","grad school","Denmark","Boston"],"title":"Safe and sound and COVID-19 negative back in the US","uri":"/2020-09-01-safe-and-sound-and-covid-19-negative/"},{"categories":["Reviews"],"content":"I’m going to go out on a limb here and guess that most scientists didn’t decide to become reseachers because they dreamed of pouring hours into Matlab scripts and peering at liness of code on a computer screen. No. We dreamed of pouring a test tube of blue solution into an Erlenmeyer flask of red solution, or peering through telescopes you actually put your eye up against, or other pursuits equally noble and sholarly. Alas, most research these days requires or at least seriously benefits from computational work. Models are powerful, datasets are only getting larger and more complicated, and computers are—unfortunately for those of us with red-solution-blue-solution scientific dreams—pretty darn useful. Still, many researchers never formally learn to program. This was the case for me—as a geobiology major at Caltech, I was required to take physics up through special relativity but was never taught to code. I was always planning to work on improving my coding chops in graduate school, but COVID-19 definitely accelerated things. Instead of lab work, I’ll be starting a work-from-home-friendly phylogeneics project when I begin my PhD. The past few months, I’ve been taking programming and data science courses online to prepare. I need to learn Python and R, and the first Python course I chose was MITx: 6.00.1x Introduction to Computer Science and Programming using Python. It’s easy to find reviews of 6.00.1x online. Still, I thought I’d throw my hat into the ring here to provide a review from the perspective of a researcher learning to code for science since our needs differ in some important ways from those of the typical beginner programmer. Basic Information (pacing, grading, credit options, pricing, etc.) Course: 6.00.1x: Introduction to Computer Science and Programming Using Python Platform: edX Institution: MITx (an online education initiative of MIT) Pacing: Instructor-paced, weekly assignment schedule Length: 9 weeks (lectures/problem sets: 6; exams: 2; bonus content: 1) Workload: Generally considered rigorous in comparison to other online intro CS courses. ~2hrs of lecture and 2+ hrs of problem set weekly. Grading: Finger exercises 10%, problem sets 40%, midterm 25%, final 25%. Lowest problem set grade dropped. Letter grades awarded as A \u003e= 80%, B \u003e= 65%, C \u003e= 55% with a grade of C or better required to pass. Certification/Credit edX verified certificate $75, undergraduate-level university credit (3 credits) through Charter Oak State College for $300 Available for free: all course materials except midterm and final exam. Archived version of course and assignments accessible after course conclusion only by verified learners Overall Rating: 7/10 6.00.1x offers a fast-paced, solid introduction to computer science in Python emphasizing fundamental concepts. Expect a demanding, rigorous course with somewhat dry lectures and very little treatment of practical programming or applications. Support for students is fantastic, with an optional texbook providing additional explanations and practice problems and an active commnunity of peers and TAs to provide help and pose additional challenges. Verified certificates are fairly priced and it is possible to earn university credit. However, other introductory courses offer better options for continuing into a professional certifications/online micro-degrees. For researchers seeking a traditional introduction to computer science or whose application would benefit from an understanding of abstract computer science fundamentals, 6.00.1x is a fantastic choice. But there are better options if you simply need to learn to program practically in Python or want a more science-targeted experience. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:0:0","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"X or no, 6.00.1x is an MIT course 6.00.1x is a MOOC version of MIT’s introductory computer science course, and it definitely shows. This is not a “computation appreciation” course introducing the many wonderful things that are possible to do with code. It doesn’t touch on application at all, and isn’t intended to teach you the ins and outs of the Python language. Instead, true to MIT form, 6.00.1x focuses on abstract, language-agnostic concepts like the core elements of a program, control flow, debugging, exception handling, and computational complexity. Course content week-by-week Week 1: short introduction to Python, the Spyder IDE, core elements of a program, strings, bindings, control flow, iteration Week 2: floats and fractions, basic programs incl. bisection search \u0026 the Newton-Raphson approximation for square roots, functions, scope, keyword arguments, iteration vs recursion, recursive algorithms incl. Towers of Hanoi and calculation of Fibonacci numbers, file handling Week 3: tuples, lists, mutable vs immutable types, dictionaries, functions as objects, calculating the Fibonacci numbers using dictionaries, more on scope, global variables Week 4: debugging, designing test suites, classes of tests, reading code, exception handling, assertions, exceptions Week 5: classes, inheritance, class methods, object oriented programming, heierarchies, using inherited methods, building a “gradebook” class as an example of classes and inheritance, generators Week 6: computational complexity, program efficiency, Big Oh notation, complexity classes, searching and sorting algorithms incl. linear search, bisection search, bogo and bubble sort, selection sort, merge sort Week 7 (optional): visualizing results, overlapping displays, changing data displays, adding documentation to displays These principles underpin programming in any language and provide an important foundation for computer scientists. And it is very much MIT’s style to focus on the more theoretical, abstract side of things and leave application to the imagination of the student. But I can’t help but think it could be a bit too much too fast. Especially for true beginners. Generally, it seems that 6.00.1x is considered a tough introduction course. The Reddit threads I went through were positive towards the course. But they also nearly always noted that it was very rigorous, and perhaps not even suitable for beginners. The “Course Philosophy” page of 6.00.1x suggests that while students with no programming experience can succeed, they should expect to spend up to 15 hrs per week on coursework in order to do so. This all despite MIT describing the course as “designed to help people with no prior exposure to computer science or programming” with a focus on breadth rather than depth.\" ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:1:0","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"Emphasis on the “Computer Science” not on the “Programming in Python” The course assignments and examples are all in Python, and you certainly get good practice with Python along the way. In particular, I thought the course did a great job teaching students to read Python code written by others, which is a very important skill for scientists since we’re often the end-users of programs and not the designers. But the course definitely doesn’t focus on teaching Python programming. It teaches programming, period—the material just happens to be in Python. This could be good or bad for you, depending on your needs. If you’re looking for an introduction to general computer science concepts, 6.00.1x is a thorough introduction to those ideas. But if you’re not, you might be better served by a more practically-oriented course. This is especially true for folks already familiar with fundamental computer science ideas who are just looking to get up to speed on Python—6.00.1x is not a Python crash course. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:1:1","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"Expect to work hard to keep up Every week, you can expect to spend 2-3 hours on video lectures, about an hour on finger exercises (little problems you complete between sections of the lectures), and 2+ hours on problem sets. Personally, I didn’t find the course absurdly hard. I spent about 3.5 hours a week on the class—1.5 hours going through the lectures and finger exercises (many thanks to whoever put a 1.25 speed button on the videos) and about 2 hours on the problem sets. I didn’t have any problems with the exams, and didn’t need to study or review outside of watching the video lectures to keep up. However, when I read through the forums I saw that some of my classmates were spending over 10 hours on problem sets each week. I definitely had some advantages that made things easier for me. While I’m not a programmer by any means, I do have some limited experience writing code. Also, hanging around computer nerds at Caltech meant that I already got the “just Stack Overflow everything” lecture, which, for an intro class like this, really does solve most problems. Is 6.00.1x a good choice for absolute beginners? I wrote this review with scientists learning to code in mind—not the typical beginner looking to dip their feet into computer science and programming. The material covered by 6.00.1x is quite dense, and the course doesn’t address applications for programming at all. But researchers often learn to code with a particular application in mind and have STEM backgrounds that prepare them well for abstract thinking. So for scientists and grad students, I think 6.00.1x is a fine choice of introductory computer science course. But for the typical beginner, I think there are probably better options. One popular choice is the HarvardX course CS50, which is much broader than 6.00.1x and introduces students to multiple programming languages and applications. There’s also Automate the Boring Stuff with Python. This free online textbook aims to help absolute beginners use code in useful ways as quickly as possible. I also didn’t try to perfectly understand every concept, especially the more abstract ones like computational complexity. If I had wanted to do that, I would have needed to put in a lot more time. Which brings me to my next point… ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:1:2","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"You get out what you put in While 6.00.1x is tough, it provides plenty of support and resources to get you through. And if you find assignments easy, those same supports and resources offer a great way to enhance and extend your experience with the course. The instructor-paced format of 6.00.1x definitely contributes to the difficulty of the course, it also leads to a very active, supportive community of peers. If you’re struggling, you will easily be able to find people to work with on problem sets. You’ll also find plenty of classmates posting little challenges (“code this assignment in one line!\") and expansions to the material povided by the course. Optional course textbook There’s an optional textbook written by the instructor that supports the course. I personally didn’t use the textbook, but other students seem to have found it a great support. The TAs are also quite active and helpful. I frequently saw them answering questions and clarifying ideas in the forums and comments sections. I definitely didn’t put in maximal effort to the course when I did it. I watched the lectures and solved the problems, but I never went further than that. It’s definitely possible to float through some of the material in this course without understanding it. I definitely didn’t study hard enough to grasp everything 100%—just well enough to complete the assignments. I kind of regret my apathy now. There were so many opportunities to engage with other students in a way that would have enhanced my learning. Computational Thinking Using Python XSeries 6.00.1x is the first course in a two-part “XSeries” offered by MITx called Computaitonal Thinking Using Python. The second coure in the series, MITx 6.00.2x Introduciton to Computational Thinking and Data Science, is more application-focused and introduces tools in Python that are useful for data analysis and visualization. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:2:0","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"Lectures and problem sets aren’t flashy, but they get the job done 6.00.1x isn’t going to surprise you or excite you. Thanks to its focus on abstract theory over exciting application, it isn’t very inspiring or motivating. However, the material is very straightforward and usually clearly explained. Problem sets are fair, and relate directly to the content covered in lecture. And you won’t need to teach yourself anything beyond what’s introduced in the course in order to do well on the sets and exams. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:3:0","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"“Finger exercises” help you stay engaged despite dry lectures The instructor isn’t difficult to understand and usually explains concepts clearly. But his slides are often boring and hard to read—line upon line of code in small font—and he isn’t very exciting to watch. In other words, he’s the authentic university professor experience. It was sometimes difficult to stay focused enough to keep from tabbing out to other webpages. However, for the most part, I was able to stay focused thanks to the way 6.00.1x breaks lectures up into 3-15 minute sections. Between each section, students are tasked with solving a set of short problems or “finger exercises” related to the previous lecture section. I found that this way of presenting material helped me pay better attention than I usually would to a video lecture. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:3:1","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"Problem sets are fair and well-made, but don’t expect to build anything from the ground-up My experience with 6.00.1x problem sets was positive overall. The sets are fair, generally have clear directions, and—best of all—are completely possible to finish correctly without teaching yourself anything that wasn’t introduced in lecture. However, they’re not the most exciting or gratifying. For programs more complicated than a few lines, a lot of the code is already written for you and you’re simply tasked with modifying it. This makes things easy, but it’s tough to feel like you’re actually capable of building anything yourself based on the course experience. And as I’ve said before, the course does not emphasize applied or useful programming. In the problem sets, you won’t write code that visualizes data or does a task more useful than calculating Fibonnaci numbers. The most exciting assignment was a “hangman”-style word-guessing game. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:3:2","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"Options for credit and certification could be better EdX and other MOOC platforms like Coursera offer all sorts of certification options these days ranging from simple, single-course verifications to entire online degrees. And while 6.00.1x is not a stand-alone course—it is the first in a two-part “XSeries” called Computational Thinking Using Python—it definitely lags behind the competition a bit when it comes to certification options. If you don’t care about earning a more involved certification or were planning to audit anyways, this isn’t much of a problem since it doesn’t effect the course expience itself in any way. But if it does matter to you, these other introductory Python courses on edX and Coursera might be worth considering instead: Computer Science: NYUx: Basics of Computing and Programming - associated with the Computer Science Fundamentals MicroBachelors GTx: Computing in Python I - associated with the Introduction to Python Programming Professional Certificate HarvardX: CS50’s Introduction to Computer Science - associated with 4 Professional Professional Certificates: Computer Science for Web Programming, Computer Science for Game Development, Computer Science for Mobile Apps, and Computer Science for Artificial Intelligence University of Michigan on Coursera: Python Basics - associated with the Python 3 Programming Specialization Data Science: IBM: Python Basics for Data Science - associated with 3 Professional Certificates: Python Data Science, IBM Data Science, and Applied AI UCSanDiegoX: Python for Data Science (intro-level programming experience expected) - associated with Data Science MicroMasters GTx: Computing for Data Science (intro-level programming experience expected) - associated with Analytics: Esssential Tools and Methods MicroMasters University of Michigan on Coursera: Introduction to Data Science in Python - asssociated with Applied Data Science with Python Specialization ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:4:0","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":["Reviews"],"content":"Conclusion and personal experience 6.00.1x was a good experience for me. I was able to get through the lectures and problem sets without difficulty and felt that my comfort level with Python—especially reading Python—improved. I also feel more confident with basic computer science concepts than I did before. However, if I could do things over, I might choose to take a more data science targeted introduction to Python course, or at least one that was more applied. At least I am planning to continue with the next course in the Computational Thinking Using Python XSeries, so hopefully I’ll get some exposure to data applications there. Expect another review after that’s done! I just want to finish off by saying that, for all my critiques of 6.00.1x, it accomplished something really important for me: alleviating my anxiety around programming. Personally, coding was never really my cup of tea. I chose to major in geobiology in part because I saw it as a sort of last refuge from the tyrrany of screens. Just the thought of programming gave me little panic attacks because I felt so out of my depth with technology and thought there was no way I could catch up to the tech bros who had been taking apart computers with their dads from the age of 3. I never considered myself a computer person, and did my best to avoid programming whenever I could. At least I didn’t consider myself a computer person. Maybe I’m getting there now—the fact that you can, I assume, access this website, indicates that some progress has been made at least. Anyways, 6.00.1x got me over thinking “there’s no way I can do this.” Maybe it’s a bit sick, but seeing others struggle in the forums on problems I found easy made me feel a lot better about my ability to keep going with this stuff. And I found myself really enjoying figuring out the problem sets. It felt a bit like doing a crossword or sudok. I still don’t think there’s any way I’ll become a developer or anything like that. But that’s the thing—you don’t need to be a developer to use programming to make your life easier. I realize now that thinking otherwise is about as ridiculous as thinking that you need to be mechanic in order to drive a car. If you’re like me and intimidation is your biggest problem, the nice thing is that it doesn’t really matter what course you take first: just being guided to the realization that you’re capable of coding is enough. ","date":"2020-08-19","objectID":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/:5:0","tags":["review","edX course review","Python"],"title":"Review: MITx 6001.x Introduction to Computer Science and Programming using Python","uri":"/2020-08-19-review-mitx-6001-x-introduction-to-computer-science-and-programming-using-python/"},{"categories":[],"content":" I’m a first-year geobiology PhD student at MIT in the Bosak Group. My scientific interests are broadly in the ongoing and historical interactions between life and the Earth, especially when it comes to microbial life and Earth’s surface environmental conditions. Right now, I’m using metagenomics to study the microbial community of Shark Bay microbial mats. Since I do science all day, I mainly post about other things, like splitting time between Boston and Denmark duing a pandemic and persuading anki flashcards to do conditional formatting. I also tend to post regularly about learning German since that’s what I spend most of my free time on these days. Before MIT, I studied geobiology at Caltech and spent a Fulbright involved in geobiological research at the University of Southern Denmark in Odense. ","date":"2020-05-27","objectID":"/about/:0:0","tags":[],"title":"","uri":"/about/"},{"categories":[],"content":"Download my CV [Word] [PDF] ","date":"2020-05-27","objectID":"/cv/:0:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Education 2020–Pres. Massachussetts Institute of Technology (MIT) Department of Earth, Atmospheric and Planetary Sciences Ph.D. Geobiology [anticipated 2025], Adv. Tanja Bosak 2019. California Institute of Technology (Caltech) B.S. Geobiology ","date":"2020-05-27","objectID":"/cv/:1:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Fellowships, Grants, \u0026 Honors ","date":"2020-05-27","objectID":"/cv/:2:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Fellowships \u0026 Grants 2020–2025. Graduate Research Fellowship, National Science Foundation MIT, Dept. of Earth, Atmospheric and Planetary Sciences 2020–2021. Ida M. Green Fellowship, MIT MIT, Dept. of Earth, Atmospheric and Planetary Sciences 2019–2020. Fulbright Grant, Intstitute of International Education University of Southern Denmark, Nordcee 2018. James J. Morgan Summer Undergraduate Research Fellowship, Caltech Caltech, Dept. of Geological and Planetary Sciences 2017. Mary Vodopia Summer Undergraduate Research Fellowship, Caltech Caltech, Dept. of Geological and Planetary Sciences 2016. Summer Undergraduate Research Fellowship, Caltech NASA Jet Propulsion Laboratory ","date":"2020-05-27","objectID":"/cv/:2:1","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Awards 2018. Fritz B. Burns Prize in Geology, Caltech 2017. Howard Reynolds Memorial Prize in Geology, Caltech 2015. Bonnie Cashin Prize for Imaginative Thinking, Caltech ","date":"2020-05-27","objectID":"/cv/:2:2","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Publications ","date":"2020-05-27","objectID":"/cv/:3:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Abstracts J. Miura, B. Ehlmann, R. Greenberger, E. Cutts (2020) Microimaging Infrared Spectroscopy for Characterization of Martian Meteorite Compositional Diversity. LPSC LI, Abstract # 2969 E. Cutts, B. Ehlmann, R. Greenberger, J. Beckett, E. Stolper (2018) Visible and Shortwave Infrared Spectroscopy of Martian Meteorites. LPSC XLIV, Abstract # 2749 ","date":"2020-05-27","objectID":"/cv/:3:1","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Experience ","date":"2020-05-27","objectID":"/cv/:4:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Research 9.2019–4.2020. University of Southern Denmark Oxygen and Cyanobacterial Carbon Fixation, Adv. Don Canfield Fulbright Grant 4.2018–9.2019. Caltech Microbial Deep-Sea Chitin Degradtion, Adv. Victoria Orphan Undergraduate research (course credit); James J. Morgan Summer Undergraduate Research Fellowship 9.2016–9.2017. Caltech Imaging Spectroscopy of Martian Meteorites, Adv. Bethany Ehlmann Undergraduate research (hourly pay); Mary Vodopia Summer Undergraduate Research Fellowship 7.2016–9.2016. NASA Jet Propulsion Laboratory Ocean Carbonate Chemistry of Europa, Adv. Steve Vance Summer Undergraduate Research Fellowship ","date":"2020-05-27","objectID":"/cv/:4:1","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Teaching 2017–2019. Caltech Teaching Assistant SP 2018, 2019. Bi 1 Principles of Biology WI 2018, 2019. Ge/Ay 159 Astrobiology WI 2018, 2019. Ge 10 Frontiers in Geology and Planetary Sciences SP 2017. Ge/Ay 11c/101c Introduction to Planetary Sciences ","date":"2020-05-27","objectID":"/cv/:4:2","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Communications \u0026 Publications 8.2018–6.2019. Caltech Office of Strategic Communications Science Writing Intern 6.2016–6.2019. The Big T (Caltech Yearbook) Editor-In-Chief 9.2018–6.2019. The Caltech Letters Graphics Editor ","date":"2020-05-27","objectID":"/cv/:4:3","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Professional Training 2020. Introduction to Computer Science and Programming Using Python MITx, edX course [certificate] 2020. Data Analysis for the Life Sciences HarvardX, edX professional certificate [in progress] PH525.1x: Statistics and R [certificate] PH525.2x: Introduction to Linear Models and Matrix Algebra [in progress] 2020. Biophotonics University of Southern Denmark, 5 ETCS PhD course (audited) ","date":"2020-05-27","objectID":"/cv/:5:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Science Communication \u0026 Outreach ","date":"2020-05-27","objectID":"/cv/:6:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Published Science Writing 2019. “Learning to Craft Handmade Scientific Tools in the Automated Age,” The California Tech 2019. “Newly Discovered Giant Planet Slingshots Around Its Star,” Caltech News 2019. “STEMonstrators Connect With Local Students,” Caltech Magazine 2019. “Famed Oceanographer Walter Munk Dead at 101,\" Caltech News 2019. “Electron Tomography Database Changes the Game,\" Caltech News 2019. “Q\u0026A: Creating a Virtual Seismologist,\" Caltech News 2019. “Frances Arnold Wins 2019 Bower Award for Achievement in Science,\" Caltech News 2018. “Cracking Open a Cold One With the Flies,\" Caltech News 2018. “Superfast Jet Observed Streaming Away from Stellar Collision,\" Caltech News 2018. “Think Outside the Classroom,” The Big T Volume 97 “Discovery” 2018. “From Tycho’s Star to Shakespeare’s Page,” Caltech News 2018. “Vilcek Foundation Prize Awarded to Mikhail Shapiro,” Caltech News 2018. “Mikhail Shapiro Wins Roger Tsien Award for Excellence in Chemical Biology,” Caltech News 2017. “Wonder Women,” The Big T Volume 96 “Beyond” ","date":"2020-05-27","objectID":"/cv/:6:1","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Podcasting 3.2018, 7.2018. Trek.fm Network Podcasts Warp 5 Episode 136, Earl Gray Episode 237 Guest Scientist 6.2017–6.2018. Strange New Worlds Co-Host ","date":"2020-05-27","objectID":"/cv/:6:2","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Talks \u0026 Panels 2.2018. Caltech Stargazing Lecture: The Science of Star Trek Q\u0026A Panel ","date":"2020-05-27","objectID":"/cv/:6:3","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Other ","date":"2020-05-27","objectID":"/cv/:7:0","tags":[],"title":"Curriculum Vitae","uri":"/cv/"},{"categories":[],"content":"Additional Published Writing 2019. The Big T Volume 98 “Make It So”” (Editor-in-Chief) 2019. “Letter from the Editor,” The Big T Volume 96 Make It So 2019. “Statistically Significant,” The Big T Volume 96 Make It So 2018. “Caltech Scholars Charged to ‘Sculpt’ Their Own Experience” Caltech News 2018. “Fox Stanton Track Reopens on South Field,” Caltech News 2018. “Caltech Awards Millikan Medal to Ben Rosen,” Caltech News 2018. The Big T Volume 97 “Discovery” (Editor-in-Chief) 2018. “Letter from the Editor,” The Big T Volume 97 “Discovery” 2018. “Good Trouble,” The Big T Volume 97 “Discovery” 2018. “Today Plus One,” The Big T Volume 97 “Discovery” 2018. “Live Long and Prosper,” The Big T Volume 97 “Discovery” 2018. “Lights Calculators Action,” The Big T Volume 97 “Discovery” 2018. “Orders of Magnitude,” The Big T Volume 97 “Discovery” 2018. “Sunfish,” The Big T Volume 97 “Discovery” 2018. “Ce n’est pas en Page,” The Big T Volume 97 “Discovery” 2018. “Spring Force,” The Big T Volume 97 “Discovery” 2017. The Big T Volume 96 “Beyond” (Editor-in-Chief) 2017. “Letter from the Editor,” The Big T Volume 96 “Beyond” 2017. “At Last!,” The Big T Volume 96 “Beyond” 2017. “Yeah Beavers!,” The Big T Volume 96 “Beyond” 2017. “If You Build It, They Will Come,” The Big T Volume 96 “Beyond” 2017. “In Comes Company,” The Big T Volume 96 “Beyond” 2017. “Fear or Fun,\" The Big T Volume 96 “Beyond” 2017. “Firewall,” The Big T Volume 96 “Beyond” 2017. “Music Theory,” The Big T Volume 96 “Beyond” 2017. “Science by Day, Music by Night,\" The Big T Volume 96 “Beyond” ","date":"2020-05-27","objectID":"/cv/:7:1","tags":[],"title":"Curriculum Vitae","uri":"/cv/"}]